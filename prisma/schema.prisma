generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id     String  @id @default(uuid())
  Tokens Tokens?

  name       String
  email      String          @unique
  password   String
  bookRented Rentuser_book[]

  birthDate  DateTime?
  cellNumber String?   @unique
  admin      Boolean   @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("user")
}

model Tokens {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String @unique

  token String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("tokens")
}

model library_book {
  id String @id @default(uuid())

  Library   Library? @relation(fields: [libraryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  libraryId String
  Book      Book?    @relation(fields: [bookId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  bookId    String

  rented Boolean @default(false)
}

model Library {
  id   String @id @default(uuid())
  name String @unique

  books library_book[]

  rented Rentuser_book[]

  @@map("library")
}

model Book {
  id String @id @default(uuid())

  library library_book[]

  name      String @unique
  hourValue Float

  userWhoRented Rentuser_book[]

  @@map("book")
}

model Rentuser_book {
  id String @id @default(uuid())

  User           User?    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId         String
  Book           Book?    @relation(fields: [bookId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  bookId         String
  Library        Library? @relation(fields: [libraryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  libraryId      String
  library_bookId String

  rented_at DateTime @default(now())
}
